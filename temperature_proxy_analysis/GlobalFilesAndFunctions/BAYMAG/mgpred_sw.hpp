// Code generated by stanc v2.32.1
#include <stan/model/model_header.hpp>
namespace mgpred_sw_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 48> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 22, column 4 to column 30)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 25, column 10 to column 11)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 25, column 3 to column 16)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 27, column 4 to column 40)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 31, column 6 to column 111)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 30, column 10 to line 32, column 5)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 29, column 6 to column 127)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 28, column 15 to line 30, column 4)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 28, column 3 to line 32, column 5)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 33, column 4 to column 29)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 26, column 15 to line 34, column 2)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 26, column 0 to line 34, column 2)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 2, column 4 to column 19)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 3, column 4 to column 19)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 4, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 5, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 5, column 4 to column 17)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 6, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 6, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 7, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 7, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 8, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 8, column 4 to column 16)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 9, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 9, column 4 to column 17)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 10, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 10, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 11, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 11, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 12, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 12, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 13, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 13, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 14, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 14, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 15, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 15, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 16, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 16, column 4 to column 20)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 17, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 17, column 4 to column 23)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 18, column 11 to column 12)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 18, column 13 to column 14)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 18, column 4 to column 21)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 19, column 4 to column 19)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 22, column 23 to column 24)",
  " (in '/Users/emilyjudd/Documents/LIPandSST/GlobalFunctions/BAYMAG/mgpred_sw.stan', line 22, column 25 to column 26)"};
class mgpred_sw_model final : public model_base_crtp<mgpred_sw_model> {
 private:
  int N;
  int M;
  int id;
  Eigen::Matrix<double,-1,1> mg_data__;
  Eigen::Matrix<double,-1,1> omega_data__;
  Eigen::Matrix<double,-1,1> clean_data__;
  Eigen::Matrix<double,-1,1> s_data__;
  Eigen::Matrix<double,-1,1> ph_data__;
  Eigen::Matrix<double,-1,1> betaT_data__;
  Eigen::Matrix<double,-1,1> betaO_data__;
  Eigen::Matrix<double,-1,1> betaC_data__;
  Eigen::Matrix<double,-1,1> betaS_data__;
  Eigen::Matrix<double,-1,1> betaP_data__;
  Eigen::Matrix<double,-1,1> alpha_data__;
  Eigen::Matrix<double,-1,1> sigma_data__;
  Eigen::Matrix<double,-1,1> prior_mu_data__;
  Eigen::Matrix<double,-1,-1> mgsw_data__;
  double prior_sig;
  Eigen::Map<Eigen::Matrix<double,-1,1>> mg{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> omega{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> clean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> s{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ph{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> betaT{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> betaO{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> betaC{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> betaS{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> betaP{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mgsw{nullptr, 0, 0};
 public:
  ~mgpred_sw_model() {}
  mgpred_sw_model(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "mgpred_sw_model_namespace::mgpred_sw_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 13;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 14;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "id", "int",
        std::vector<size_t>{});
      id = std::numeric_limits<int>::min();
      current_statement__ = 15;
      id = context__.vals_i("id")[(1 - 1)];
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "id", id, 0);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("mg", "N", N);
      current_statement__ = 17;
      context__.validate_dims("data initialization", "mg", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      mg_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&mg) Eigen::Map<Eigen::Matrix<double,-1,1>>(mg_data__.data(), N);
      {
        std::vector<local_scalar_t__> mg_flat__;
        current_statement__ = 17;
        mg_flat__ = context__.vals_r("mg");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 17;
          stan::model::assign(mg, mg_flat__[(pos__ - 1)],
            "assigning variable mg", stan::model::index_uni(sym1__));
          current_statement__ = 17;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 18;
      stan::math::validate_non_negative_index("omega", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "omega", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      omega_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&omega)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(omega_data__.data(), N);
      {
        std::vector<local_scalar_t__> omega_flat__;
        current_statement__ = 19;
        omega_flat__ = context__.vals_r("omega");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 19;
          stan::model::assign(omega, omega_flat__[(pos__ - 1)],
            "assigning variable omega", stan::model::index_uni(sym1__));
          current_statement__ = 19;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 20;
      stan::math::validate_non_negative_index("clean", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "clean", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      clean_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&clean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(clean_data__.data(), N);
      {
        std::vector<local_scalar_t__> clean_flat__;
        current_statement__ = 21;
        clean_flat__ = context__.vals_r("clean");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 21;
          stan::model::assign(clean, clean_flat__[(pos__ - 1)],
            "assigning variable clean", stan::model::index_uni(sym1__));
          current_statement__ = 21;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 22;
      stan::math::validate_non_negative_index("s", "N", N);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "s", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      s_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&s) Eigen::Map<Eigen::Matrix<double,-1,1>>(s_data__.data(), N);
      {
        std::vector<local_scalar_t__> s_flat__;
        current_statement__ = 23;
        s_flat__ = context__.vals_r("s");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 23;
          stan::model::assign(s, s_flat__[(pos__ - 1)],
            "assigning variable s", stan::model::index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      stan::math::validate_non_negative_index("ph", "N", N);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "ph", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      ph_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&ph) Eigen::Map<Eigen::Matrix<double,-1,1>>(ph_data__.data(), N);
      {
        std::vector<local_scalar_t__> ph_flat__;
        current_statement__ = 25;
        ph_flat__ = context__.vals_r("ph");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 25;
          stan::model::assign(ph, ph_flat__[(pos__ - 1)],
            "assigning variable ph", stan::model::index_uni(sym1__));
          current_statement__ = 25;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 26;
      stan::math::validate_non_negative_index("betaT", "M", M);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "betaT", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      betaT_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&betaT)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(betaT_data__.data(), M);
      {
        std::vector<local_scalar_t__> betaT_flat__;
        current_statement__ = 27;
        betaT_flat__ = context__.vals_r("betaT");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 27;
          stan::model::assign(betaT, betaT_flat__[(pos__ - 1)],
            "assigning variable betaT", stan::model::index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("betaO", "M", M);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "betaO", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      betaO_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&betaO)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(betaO_data__.data(), M);
      {
        std::vector<local_scalar_t__> betaO_flat__;
        current_statement__ = 29;
        betaO_flat__ = context__.vals_r("betaO");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 29;
          stan::model::assign(betaO, betaO_flat__[(pos__ - 1)],
            "assigning variable betaO", stan::model::index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      stan::math::validate_non_negative_index("betaC", "M", M);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "betaC", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      betaC_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&betaC)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(betaC_data__.data(), M);
      {
        std::vector<local_scalar_t__> betaC_flat__;
        current_statement__ = 31;
        betaC_flat__ = context__.vals_r("betaC");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 31;
          stan::model::assign(betaC, betaC_flat__[(pos__ - 1)],
            "assigning variable betaC", stan::model::index_uni(sym1__));
          current_statement__ = 31;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 32;
      stan::math::validate_non_negative_index("betaS", "M", M);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "betaS", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      betaS_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&betaS)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(betaS_data__.data(), M);
      {
        std::vector<local_scalar_t__> betaS_flat__;
        current_statement__ = 33;
        betaS_flat__ = context__.vals_r("betaS");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 33;
          stan::model::assign(betaS, betaS_flat__[(pos__ - 1)],
            "assigning variable betaS", stan::model::index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("betaP", "M", M);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "betaP", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      betaP_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&betaP)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(betaP_data__.data(), M);
      {
        std::vector<local_scalar_t__> betaP_flat__;
        current_statement__ = 35;
        betaP_flat__ = context__.vals_r("betaP");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 35;
          stan::model::assign(betaP, betaP_flat__[(pos__ - 1)],
            "assigning variable betaP", stan::model::index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("alpha", "M", M);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      alpha_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&alpha)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_data__.data(), M);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 37;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 37;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      stan::math::validate_non_negative_index("sigma", "M", M);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      sigma_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&sigma)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_data__.data(), M);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 39;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 39;
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          current_statement__ = 39;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 40;
      stan::math::validate_non_negative_index("prior_mu", "N", N);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "prior_mu", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      prior_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                          std::numeric_limits<double>::quiet_NaN());
      new (&prior_mu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_mu_data__.data(), N);
      {
        std::vector<local_scalar_t__> prior_mu_flat__;
        current_statement__ = 41;
        prior_mu_flat__ = context__.vals_r("prior_mu");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 41;
          stan::model::assign(prior_mu, prior_mu_flat__[(pos__ - 1)],
            "assigning variable prior_mu", stan::model::index_uni(sym1__));
          current_statement__ = 41;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 42;
      stan::math::validate_non_negative_index("mgsw", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("mgsw", "M", M);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "mgsw", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)});
      mgsw_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, M,
                      std::numeric_limits<double>::quiet_NaN());
      new (&mgsw) Eigen::Map<Eigen::Matrix<double,-1,-1>>(mgsw_data__.data(),
        N, M);
      {
        std::vector<local_scalar_t__> mgsw_flat__;
        current_statement__ = 44;
        mgsw_flat__ = context__.vals_r("mgsw");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 44;
            stan::model::assign(mgsw, mgsw_flat__[(pos__ - 1)],
              "assigning variable mgsw", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 44;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 45;
      context__.validate_dims("data initialization", "prior_sig", "double",
        std::vector<size_t>{});
      prior_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      prior_sig = context__.vals_r("prior_sig")[(1 - 1)];
      current_statement__ = 46;
      stan::math::validate_non_negative_index("t", "N", N);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("t", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (N * M);
  }
  inline std::string model_name() const final {
    return "mgpred_sw_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.1",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "mgpred_sw_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, M, DUMMY_VAR__);
      current_statement__ = 1;
      t = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(-2.5, lp__, N,
            M);
      {
        current_statement__ = 2;
        stan::math::validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 12;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 4;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(t, "t",
                             stan::model::index_omni(),
                             stan::model::index_uni(m)), prior_mu, prior_sig));
          current_statement__ = 9;
          if (stan::math::logical_lt(id, 3)) {
            current_statement__ = 7;
            stan::model::assign(mu,
              stan::math::add(
                stan::math::add(
                  stan::math::add(
                    stan::math::add(
                      stan::math::add(
                        stan::math::add(
                          stan::model::rvalue(alpha, "alpha",
                            stan::model::index_uni(m)),
                          stan::math::multiply(
                            stan::model::rvalue(t, "t",
                              stan::model::index_omni(),
                              stan::model::index_uni(m)),
                            stan::model::rvalue(betaT, "betaT",
                              stan::model::index_uni(m)))),
                        stan::math::multiply(s,
                          stan::model::rvalue(betaS, "betaS",
                            stan::model::index_uni(m)))),
                      stan::math::multiply(ph,
                        stan::model::rvalue(betaP, "betaP",
                          stan::model::index_uni(m)))),
                    stan::math::multiply(omega,
                      stan::model::rvalue(betaO, "betaO",
                        stan::model::index_uni(m)))),
                  stan::math::subtract(1,
                    stan::math::multiply(clean,
                      stan::model::rvalue(betaC, "betaC",
                        stan::model::index_uni(m))))),
                stan::model::rvalue(mgsw, "mgsw", stan::model::index_omni(),
                  stan::model::index_uni(m))), "assigning variable mu");
          } else {
            current_statement__ = 5;
            stan::model::assign(mu,
              stan::math::add(
                stan::math::add(
                  stan::math::add(
                    stan::math::add(
                      stan::math::add(
                        stan::model::rvalue(alpha, "alpha",
                          stan::model::index_uni(m)),
                        stan::math::multiply(
                          stan::model::rvalue(t, "t",
                            stan::model::index_omni(),
                            stan::model::index_uni(m)),
                          stan::model::rvalue(betaT, "betaT",
                            stan::model::index_uni(m)))),
                      stan::math::multiply(s,
                        stan::model::rvalue(betaS, "betaS",
                          stan::model::index_uni(m)))),
                    stan::math::multiply(omega,
                      stan::model::rvalue(betaO, "betaO",
                        stan::model::index_uni(m)))),
                  stan::math::subtract(1,
                    stan::math::multiply(clean,
                      stan::model::rvalue(betaC, "betaC",
                        stan::model::index_uni(m))))),
                stan::model::rvalue(mgsw, "mgsw", stan::model::index_omni(),
                  stan::model::index_uni(m))), "assigning variable mu");
          }
          current_statement__ = 10;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(mg, mu,
                           stan::model::rvalue(sigma, "sigma",
                             stan::model::index_uni(m))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "mgpred_sw_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> t =
        Eigen::Matrix<double,-1,-1>::Constant(N, M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      t = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(-2.5, lp__, N,
            M);
      out__.write(t);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, M, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(t,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, M),
        "assigning variable t");
      out__.write_free_lb(-2.5, t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 1;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(t, t_flat__[(pos__ - 1)],
              "assigning variable t", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(-2.5, t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"t"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N),
                                                 static_cast<size_t>(M)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "t" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "t" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"t\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"t\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(M) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (N * M);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (N * M);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = mgpred_sw_model_namespace::mgpred_sw_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return mgpred_sw_model_namespace::profiles__;
}
#endif